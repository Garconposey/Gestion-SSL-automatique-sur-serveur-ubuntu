1Ô∏è‚É£ Pr√©parer l‚Äôarborescence pour les challenges Let‚Äôs Encrypt

Cr√©e un dossier partag√© pour les challenges ACME de Certbot :

sudo mkdir -p /var/www/certbot
sudo chown -R www-data:www-data /var/www/certbot
sudo chmod -R 755 /var/www/certbot


Tester l‚Äôacc√®s depuis l‚Äôext√©rieur :

echo "test-certbot" | sudo tee /var/www/certbot/.well-known/acme-challenge/testfile
curl http://ton-domaine/.well-known/acme-challenge/testfile


Si tu vois test-certbot ‚Üí Nginx sert correctement les fichiers pour le challenge.

2Ô∏è‚É£ Ajouter un nouveau domaine ou sous-domaine dans Nginx

Cr√©e un fichier de configuration Nginx pour ton domaine :

sudo nano /etc/nginx/sites-available/nouveau-domaine.com.conf


Exemple minimal pour HTTP -> HTTPS + challenge :

server {
    listen 80;
    server_name nouveau-domaine.com www.nouveau-domaine.com;

    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}


Pour un service derri√®re Docker (ex: Odoo sur 8069) :

upstream odoo {
    server 127.0.0.1:8069;
}

server {
    listen 443 ssl;
    server_name nouveau-domaine.com www.nouveau-domaine.com;

    ssl_certificate /etc/letsencrypt/live/nouveau-domaine.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nouveau-domaine.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://odoo;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
    }
}


Activer le site :

sudo ln -s /etc/nginx/sites-available/nouveau-domaine.com.conf /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

3Ô∏è‚É£ Installer SSL avec Certbot
sudo certbot --nginx -d nouveau-domaine.com -d www.nouveau-domaine.com


Certbot d√©tecte le bloc HTTP et place automatiquement le certificat.

Tu peux r√©p√©ter pour chaque sous-domaine.

üí° Pour Docker : si Nginx reverse-proxy est hors conteneur, Certbot fonctionne normalement via /var/www/certbot.

4Ô∏è‚É£ Automatiser le renouvellement

Certbot installe automatiquement un cronjob ou un systemd timer pour renouveler tous les certificats :

sudo systemctl list-timers | grep certbot


Test du renouvellement automatique sans attendre l‚Äô√©ch√©ance :

sudo certbot renew --dry-run


‚úÖ Si pas d‚Äôerreur, tout est bien configur√©.

5Ô∏è‚É£ Commandes de v√©rification et debugging
a) V√©rifier la syntaxe Nginx
sudo nginx -t

b) V√©rifier que le challenge est servi
curl http://ton-domaine/.well-known/acme-challenge/testfile


Doit retourner le contenu du fichier de test.

c) V√©rifier les certificats existants
sudo certbot certificates


Montre les dates d‚Äôexpiration et chemins vers fullchain.pem et privkey.pem.

d) V√©rifier que le renouvellement automatique est actif
sudo systemctl list-timers | grep certbot
sudo systemctl status certbot.timer

6Ô∏è‚É£ Renouvellement manuel (cas extr√™me)

Pour renouveler un seul certificat imm√©diatement :

sudo certbot renew --cert-name nom-du-certificat


Pour forcer un renouvellement et mise √† jour Nginx :

sudo certbot renew --force-renewal
sudo systemctl reload nginx

7Ô∏è‚É£ Bonnes pratiques

Toujours tester avec curl avant d‚Äôex√©cuter Certbot.

Ne jamais mettre de server imbriqu√© dans un autre server.

S√©parer les confs Nginx par domaine/sub-domaine dans sites-available.

Documenter les ports des conteneurs et les upstream Nginx.

V√©rifier le timer systemd de Certbot r√©guli√®rement, surtout apr√®s un reboot.
